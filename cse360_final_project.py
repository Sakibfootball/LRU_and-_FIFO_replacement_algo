# -*- coding: utf-8 -*-
"""CSE360_final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-e31uSg8T_1NRy-qosdjl34_Jfgk6Vjn
"""
"""Requirements"""
# 1. pip install matplotlib
# 1. pip install numpy


"""Create a file and Write to the file: 1000 random numbers """

import random
from queue import Queue
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
from matplotlib import style
with open("test2.txt", 'w') as file:
    # write contents to the test2.txt file
    for x in range(1000):
        number = random.randint(0, 999)
        file.write(str(number) + "\n")
file.close()

"""Read the file"""

# this queue is for FIFO implenetation
q_num_list = Queue()
# this list is for LRU implementation
number_list = []
f1 = open('test2.txt', 'r')
numbers = f1.readlines()
for number in numbers:
    q_num_list.put(number)
    number_list.append(int(number))

"""For both algorithms input the cache size as number_of_cache"""


class ReplacementAlgo:
    def __init__(self):
        self.blocks = []

    # LRU Algorithm

    def LRU(self, number_of_cache):
        miss_count = 0
        hit_count = 0
        for idx, number in enumerate(number_list):
            if number in self.blocks:
                hit_count += 1
            elif len(self.blocks) < number_of_cache and number not in self.blocks:
                miss_count += 1
                self.blocks.append(number)
            elif len(self.blocks) == number_of_cache and number not in self.blocks:
                miss_count += 1
                duplicate_lru = []
                counter = 0
                idx1 = idx
                idx1 -= 1
                while True:
                    if number_list[idx1] == number or number_list[idx1] in duplicate_lru:
                        duplicate_lru.append(number_list[idx1])
                        idx1 -= 1
                    else:
                        duplicate_lru.append(number_list[idx1])
                        idx2 = idx1
                        idx1 -= 1
                        counter += 1
                        if counter == number_of_cache:
                            x = self.blocks.index(number_list[idx2])
                            self.blocks[x] = number
                            break
            # print(self.blocks)
        print("LRU Algorithm")
        print(f"Number of Cache {number_of_cache}")
        print(f"Hit Count, Miss count:  {hit_count}, {miss_count}")
        print(f"final Cache after LRU Algorithm {self.blocks}")
        print()
        return hit_count, miss_count

    # FIFO Algorithm

    def fifo_algo(self, number_of_cache):
        hit = 0
        miss = 0

        for i in number_list:
            if i in self.blocks:
                hit += 1
            else:
                if len(self.blocks) == number_of_cache:
                    self.blocks.pop(0)

                self.blocks.append(i)
                miss += 1

        print()
        print("FIFO Algorithm")
        print(f"Number of Cache {number_of_cache}")
        print(f"Hit Count, Miss count:  {hit}, {miss}")
        print(f"final Cache after LRU Algorithm {self.blocks}")

        return hit, miss


"""Driver"""

s1 = ReplacementAlgo()
s2 = ReplacementAlgo()
number_of_caches = []
hits_lru = []
miss_lru = []
hits_fifo = []
miss_fifo = []

"""Run the LRU algorithms for 35 times"""

for i in range(1, 35):
    h1, m1 = s1.LRU(i)
    hits_lru.append(h1)
    miss_lru.append(m1)
    number_of_caches.append(i)

"""Run the FIFO algorithms for 35 times"""

for i in range(1, 35):
    h2, m2 = s2.fifo_algo(i)
    hits_fifo.append(h2)
    miss_fifo.append(m2)

"""Graph Plotting: Number of Cache Vs Hit Count"""

style.use('ggplot')
x = np.array(number_of_caches)
y = np.array(hits_lru)
z = np.array(hits_fifo)
plt.plot(x, y)
plt.plot(x, z)
plt.xlabel("Number Of Cache")
plt.ylabel("Hit count LRU / Hit Count FIFO")
plt.title("Number of Cache Vs Hit Count")
plt.legend(["Hit count LRU", "Hit Count FIFO"])
plt.show()

"""Graph Plotting: Number of Cache Vs Miss Count"""

x = np.array(number_of_caches)
y = np.array(miss_lru)
z = np.array(miss_fifo)
plt.plot(x, y)
plt.plot(x, z)
plt.xlabel("Number Of Cache")
plt.ylabel("Miss count LRU / Miss Count FIFO")
plt.title("Number of Cache Vs Miss Count")
plt.legend(["Miss count LRU", "Miss Count FIFO"])
plt.show()
